#INCLUDE "RWMAKE.CH"
#INCLUDE "TOPCONN.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "FWMVCDEF.CH"

/*
эээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээ
╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠
╠╠иммммммммммяммммммммммкмммммммямммммммммммм`ммммммммкммммммямммммммммммм╩╠╠
╠╠╨Programa  ЁMLKUPSA2  ╨Autor  ЁMarcelo Joner        ╨ Data Ё 01/04/2020 ╨╠╠
╠╠лммммммммммьммммммммммймммммммоммммммммммммммммммммйммммммоммммммммммммм╧╠╠
╠╠╨Desc.     ЁFunГЦo de integraГЦo cadastro de fornecedor com API REST do ╨╠╠
╠╠╨          Ёsoftware MilkUp.                                            ╨╠╠
╠╠лммммммммммьмммммммммммммммммммммммммммммммммммммммммммммммммммммммммммм╧╠╠
╠╠╨Uso       ЁLaticinios Silvestre                                        ╨╠╠
╠╠хммммммммммомммммммммммммммммммммммммммммммммммммммммммммммммммммммммммм╪╠╠
╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠
ъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъ
*/
User Function MLKUPSA2(nOper, lRegSA2)

	Local lRet			:= .T.
	Local aHeader		:= {}
	Local cToken		:= ALLTRIM(GETMV("MV_ZL00007",, ""))
	Local cParam		:= "api_key=" + cToken
	Local cUrl			:= "https://api.milkup.com.br/sync"
	Local oRetJSON
	Local oRestClient

	Default nOper		:= 0
	Default lRegSA2		:= .F.

//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
//ЁExecuta regras de integraГЦo caso exista Token configuradoЁ
//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
	If !EMPTY(cToken)

		//зддддддддддддддддддддддддддддддддддддддддддддддддддддд
		//ЁCria objeto da clase FWRest para executar integraГЦoЁ
		//юддддддддддддддддддддддддддддддддддддддддддддддддддддд
		oRestClient	:= FWRest():New(cUrl)

		//зддддддддддддддддддддддддддддддддддддддддддд
		//ЁCarrega variaveis utilizadas na integraГЦoЁ
		//юддддддддддддддддддддддддддддддддддддддддддд
		cA2_FILIAL	:= ""
		cA2_X_MKUID	:= IIF(lRegSA2, SA2->A2_X_MKUID	, M->A2_X_MKUID)

		//здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
		//ЁPrepara variaveis para definiГЦo dos atributos de execuГЦo da APIЁ
		//юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
		If nOper == 3 .OR. nOper == 4
			cA2_X_TIPO	:= IIF(lRegSA2, SA2->A2_X_TIPO	, M->A2_X_TIPO)
			cA2_NOME	:= IIF(lRegSA2, SA2->A2_NOME	, M->A2_NOME)
			cA2_TEL		:= IIF(lRegSA2, SA2->A2_TEL		, M->A2_TEL)
			cA2_COD		:= IIF(lRegSA2, SA2->A2_COD		, M->A2_COD)
			cA2_LOJA	:= IIF(lRegSA2, SA2->A2_LOJA	, M->A2_LOJA)
			cA2_CGC		:= IIF(lRegSA2, SA2->A2_CGC		, M->A2_CGC)
			cA2_X_LINHA	:= IIF(lRegSA2, SA2->A2_X_LINHA	, M->A2_X_LINHA)
			cA2_X_MKUID	:= IIF(lRegSA2, SA2->A2_X_MKUID	, M->A2_X_MKUID)
			cA2_MSBLQL	:= IIF(lRegSA2, SA2->A2_MSBLQL	, M->A2_MSBLQL)

			//здддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
			//ЁDefine ID da Filial Ю partir do inicio do cСdigo da LinhaЁ
			//юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
			If SUBSTR(cA2_X_LINHA,01,02) == "TB" .OR. ( EMPTY(cA2_X_LINHA) .and. nOper == 3 )
				cA2_FILIAL := "d32f1605-a61e-4411-a9e8-0e14c4e2bb0d"
			ElseIf SUBSTR(cA2_X_LINHA,01,02) == "MC"
				cA2_FILIAL := "44c18b1d-7b69-4f36-ad9c-b1d17ec4b17c"
			EndIf

			//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
			//ЁRealiza composiГЦo de string referente aos dados do produtorЁ
			//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
			cJSON := '{'
			cJSON += '"id_laticinio":"' + ALLTRIM(cA2_FILIAL) + '",'
			cJSON += '"nome":"' + ALLTRIM(cA2_NOME) + '",'
			cJSON += '"nome_propriedade":" ",'
			cJSON += '"telefone":"' + ALLTRIM(cA2_TEL) + '",'
			cJSON += '"codigo_laticinio":"' + ALLTRIM(cA2_COD) + '-' + ALLTRIM(cA2_LOJA) + '",'
			cJSON += '"cnpj_cpf":"' + ALLTRIM(cA2_CGC) + '",'
			cJSON += '"regiao":"' + ALLTRIM(cA2_X_LINHA) + '",'
			cJSON += '"status":"APROVADO"'
			cJSON += '}'
		EndIf

		Do Case

			//зддддддддддддддддддддддддддддддддддддддддддд
			//ЁExecuta API REST de INCLUSцO de produtoresЁ
			//юддддддддддддддддддддддддддддддддддддддддддд
		Case nOper == 3

			//здддддддддддддддддддддддддддддддддддддд
			//ЁRealiza Ю inclusЦo caso seja PRODUTORЁ
			//юдддддддддддддддддддддддддддддддддддддд
			If cA2_X_TIPO == "P" .AND. !EMPTY(cA2_X_LINHA)

				//здддддддддддддддддддддддддддддддддддддддддд
				//ЁSeta parБmetros de execuГЦo da integraГЦoЁ
				//юдддддддддддддддддддддддддддддддддддддддддд
				oRestClient:SetPath("/produtores?" + cParam)
				oRestClient:SetPostParams(cJSON)

				//здддддддддддддддддддддд
				//ЁComposiГЦo do aHeaderЁ
				//юдддддддддддддддддддддд
				AADD(aHeader, "Content-Type: application/json")

				//зддддддддддддддддддддддддддддддддддддддддддддддддддд
				//ЁExecutra POST e avalia retorno (sucesso\insucesso)Ё
				//юддддддддддддддддддддддддддддддддддддддддддддддддддд
				If oRestClient:Post(aHeader)

					//здддддддддддддддддддддддддддддддддддддддддд
					//ЁObtИm o retorno da API e converte em JSONЁ
					//юдддддддддддддддддддддддддддддддддддддддддд
					cRetJSON := oRestClient:GetResult()
					FWJsonDeserialize(cRetJSON, @oRetJSON)

					//зддддддддддддддддддддддддддддддддддд
					//ЁObtИm o ID do Fornecedor no MILKUPЁ
					//юддддддддддддддддддддддддддддддддддд
					If AttIsMemberOf(oRetJSON, "ID")

						//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
						//ЁSendo integraГЦo de registro gravado na SA2, atualiza o IDЁ
						//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
						If lRegSA2
							RECLOCK("SA2", .F.)
							SA2->A2_X_MKUID := oRetJSON:ID
							SA2->(MSUNLOCK())
						Else
							//зддддддддддддддддддддддддддддддддддддддддддддддддддддддд
							//ЁSendo integraГЦo de registro em memСria, atualiza o IDЁ
							//юддддддддддддддддддддддддддддддддддддддддддддддддддддддд
							oModelo	:= FWModelActive()
							oModelSA2 := oModelo:GetModel("SA2MASTER")
							oModelSA2:LoadValue("A2_X_MKUID", oRetJSON:ID)
						EndIf
					EndIf
				Else
					//здддддддддддддддддддддддддддддддддддддддддд
					//ЁObtИm o retorno da API e converte em JSONЁ
					//юдддддддддддддддддддддддддддддддддддддддддд
					cRetJSON := oRestClient:GetResult()
					FWJsonDeserialize(cRetJSON, @oRetJSON)

					//зддддддддддддддддддддддддддддддддддд
					//ЁObtИm o ID do Fornecedor no MILKUPЁ
					//юддддддддддддддддддддддддддддддддддд
					If AttIsMemberOf(oRetJSON, "ID") .AND. AttIsMemberOf(oRetJSON, "STATUS")
						cStatus := oRetJSON:STATUS
						cId := oRetJSON:ID
						//зддддддддддддддддддддддддддддддддддддддддддддддддддддд
						//ЁCaso seja um PRODUTOR - ATIVO, altera o seu cadastroЁ
						//юддддддддддддддддддддддддддддддддддддддддддддддддддддд
						If cStatus == "ACTIVE"

							//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
							//ЁObtИm o ID do Produtor no MILKUP e atualiza no cadastro Fornecedor caso o mesmo ainda nЦo tenha IDЁ
							//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
							If AttIsMemberOf(oRetJSON, "ID") .AND. EMPTY(cA2_X_MKUID)

								//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
								//ЁSendo integraГЦo de registro gravado na SA2, atualiza o IDЁ
								//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
								If lRegSA2
									RECLOCK("SA2", .F.)
									SA2->A2_X_MKUID := oRetJSON:ID
									SA2->(MSUNLOCK())
								Else
									//зддддддддддддддддддддддддддддддддддддддддддддддддддддддд
									//ЁSendo integraГЦo de registro em memСria, atualiza o IDЁ
									//юддддддддддддддддддддддддддддддддддддддддддддддддддддддд
									oModelo	:= FWModelActive()
									oModelSA2 := oModelo:GetModel("SA2MASTER")
									oModelSA2:LoadValue("A2_X_MKUID", oRetJSON:ID)
								EndIf
							EndIf

							//здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
							//ЁExecuta novamente Ю funГЦo considerando-se de ALTERAгцO do cadastro no MilkUpЁ
							//юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
							lRet := U_MLKUPSA2(4, lRegSA2)

						Else

							//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
							//ЁCaso seja um PRODUTOR - INATIVO, executa ativaГЦo do mesmoЁ
							//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
							oRestClient	:= FWRest():New(cUrl)

							//здддддддддддддддддддддддддддддддддддддддддд
							//ЁSeta parБmetros de execuГЦo da integraГЦoЁ
							//юдддддддддддддддддддддддддддддддддддддддддд
							oRestClient:SetPath("/produtores/" + cId + "/reativar?" + cParam)
							oRestClient:SetPostParams(cJSON)

							//здддддддддддддддддддддд
							//ЁComposiГЦo do aHeaderЁ
							//юдддддддддддддддддддддд
							AADD(aHeader, "Content-Type: application/json")

							//здддддддддддддддддддддддддддддддддддддддддддддддддд
							//ЁExecutra PUT e avalia retorno (sucesso\insucesso)Ё
							//юдддддддддддддддддддддддддддддддддддддддддддддддддд
							If oRestClient:Put(aHeader)

								//здддддддддддддддддддддддддддддддддддддддддд
								//ЁObtИm o retorno da API e converte em JSONЁ
								//юдддддддддддддддддддддддддддддддддддддддддд
								cRetJSON := oRestClient:GetResult()
								FWJsonDeserialize(cRetJSON, @oRetJSON)

								//зддддддддддддддддддддддддддддддддддд
								//ЁObtИm o ID do Fornecedor no MILKUPЁ
								//юддддддддддддддддддддддддддддддддддд
								If AttIsMemberOf(oRetJSON, "ID")

									//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
									//ЁSendo integraГЦo de registro gravado na SA2, atualiza o IDЁ
									//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
									If lRegSA2
										RECLOCK("SA2", .F.)
										SA2->A2_X_MKUID := oRetJSON:ID
										SA2->(MSUNLOCK())
									Else
										//зддддддддддддддддддддддддддддддддддддддддддддддддддддддд
										//ЁSendo integraГЦo de registro em memСria, atualiza o IDЁ
										//юддддддддддддддддддддддддддддддддддддддддддддддддддддддд
										oModelo	:= FWModelActive()
										oModelSA2 := oModelo:GetModel("SA2MASTER")
										oModelSA2:LoadValue("A2_X_MKUID", oRetJSON:ID)
									EndIf
								EndIf
								lRet := U_MLKUPSA2(4, lRegSA2)
							Else
								//зддддддддддддддддддддддддддддддддддддддддддддддддддддддд
								//ЁObtИm o retorno da API e apresenta mensagem ao usuАrioЁ
								//юддддддддддддддддддддддддддддддддддддддддддддддддддддддд
								cRetJSON := oRestClient:GetLastError() + oRestClient:GetResult()
								Help(NIL, NIL, "AtenГЦo", NIL, "NЦo foi possМvel realizar Ю integraГЦo do cadastro do fornecedor com o MilkUp.", 1, 0, NIL, NIL, NIL, NIL, NIL, {"Informe Ю ocorrЙncia ao departamento de TI."})
								Alert(cRetJSON)

								lRet := .F.
							EndIf
						EndIf
					Else
						//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
						//ЁApresenta mensagem ao usuАrio alertando em tonro da questЦo e nЦo permite Ю inclusЦo do FornecedorЁ
						//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
						cRetJSON := oRestClient:GetLastError() + oRestClient:GetResult()
						Help(NIL, NIL, "AtenГЦo", NIL, "NЦo foi possМvel realizar Ю integraГЦo do cadastro do fornecedor com o MilkUp.", 1, 0, NIL, NIL, NIL, NIL, NIL, {"Informe Ю ocorrЙncia ao departamento de TI."})
						Alert(cRetJSON)

						lRet := .F.
					EndIf
				EndIf
			EndIf




			//здддддддддддддддддддддддддддддддддддддддддддд
			//ЁExecuta API REST de ALTERAгцO de produtoresЁ
			//юдддддддддддддддддддддддддддддддддддддддддддд
		Case nOper == 4

			//здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
			//ЁExecuta regras de alteraГЦo, caso o fornecedor alterado esteja integrado com o MilkUpЁ
			//юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
			If !EMPTY(cA2_X_MKUID)
				cId := cA2_X_MKUID

				//здддддддддддддддддддддддддддддддддддддддддд
				//ЁSeta parБmetros de execuГЦo da integraГЦoЁ
				//юдддддддддддддддддддддддддддддддддддддддддд
				oRestClient:SetPath("/produtores/" + cId + "?" + cParam)

				//здддддддддддддддддддддд
				//ЁComposiГЦo do aHeaderЁ
				//юдддддддддддддддддддддд
				AADD(aHeader, "Content-Type: application/json")

				//здддддддддддддддддддддддддддддддддддддддддддддддддд
				//ЁExecutra PUT e avalia retorno (sucesso\insucesso)Ё
				//юдддддддддддддддддддддддддддддддддддддддддддддддддд
				If !oRestClient:Put(aHeader, cJSON)

					//здддддддддддддддддддддддддддддддддддддддддд
					//ЁObtИm o retorno da API e converte em JSONЁ
					//юдддддддддддддддддддддддддддддддддддддддддд
					cRetJSON := oRestClient:GetResult()
					FWJsonDeserialize(cRetJSON, @oRetJSON)

					If at ("page_404", cRetJSON) > 0
						cRetJSON := oRestClient:GetLastError()
						Help(NIL, NIL, "AtenГЦo", NIL, "NЦo foi possМvel realizar Ю integraГЦo do cadastro do fornecedor com o MilkUp.", 1, 0, NIL, NIL, NIL, NIL, NIL, {"Informe Ю ocorrЙncia ao departamento de TI. Erro: " + cRetJSON})
						lRet := .F.
					EndIf

					If at ("atualizar um registro inativo", cRetJSON) > 0
						//cRetJSON := oRestClient:GetLastError()
						//Help(NIL, NIL, "AtenГЦo", NIL, "O Produtor " + cA2_NOME + " estА inativo no Milkup!", 1, 0, NIL, NIL, NIL, NIL, NIL, {"Este produtor deve ser reativado no Milkup para continuar. Erro: " + cRetJSON})
						//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
						//ЁCaso seja um PRODUTOR - INATIVO, executa ativaГЦo do mesmoЁ
						//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
						oRestClient	:= FWRest():New(cUrl)

						//здддддддддддддддддддддддддддддддддддддддддд
						//ЁSeta parБmetros de execuГЦo da integraГЦoЁ
						//юдддддддддддддддддддддддддддддддддддддддддд
						oRestClient:SetPath("/produtores/" + cId + "/reativar?" + cParam)
						oRestClient:SetPostParams(cJSON)

						//здддддддддддддддддддддд
						//ЁComposiГЦo do aHeaderЁ
						//юдддддддддддддддддддддд
						AADD(aHeader, "Content-Type: application/json")

						//здддддддддддддддддддддддддддддддддддддддддддддддддд
						//ЁExecutra PUT e avalia retorno (sucesso\insucesso)Ё
						//юдддддддддддддддддддддддддддддддддддддддддддддддддд
						If oRestClient:Put(aHeader)

							//здддддддддддддддддддддддддддддддддддддддддд
							//ЁObtИm o retorno da API e converte em JSONЁ
							//юдддддддддддддддддддддддддддддддддддддддддд
							cRetJSON := oRestClient:GetResult()
							FWJsonDeserialize(cRetJSON, @oRetJSON)

							//зддддддддддддддддддддддддддддддддддд
							//ЁObtИm o ID do Fornecedor no MILKUPЁ
							//юддддддддддддддддддддддддддддддддддд
							If AttIsMemberOf(oRetJSON, "ID")

								//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
								//ЁSendo integraГЦo de registro gravado na SA2, atualiza o IDЁ
								//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
								If lRegSA2
									RECLOCK("SA2", .F.)
									SA2->A2_X_MKUID := oRetJSON:ID
									SA2->(MSUNLOCK())
								Else
									//зддддддддддддддддддддддддддддддддддддддддддддддддддддддд
									//ЁSendo integraГЦo de registro em memСria, atualiza o IDЁ
									//юддддддддддддддддддддддддддддддддддддддддддддддддддддддд
									oModelo	:= FWModelActive()
									oModelSA2 := oModelo:GetModel("SA2MASTER")
									oModelSA2:LoadValue("A2_X_MKUID", oRetJSON:ID)
								EndIf
							EndIf
						EndIf
						lRet := U_MLKUPSA2(4, lRegSA2)
					Else


						//зддддддддддддддддддддддддддддддддддд
						//ЁObtИm o ID do Fornecedor no MILKUPЁ
						//юддддддддддддддддддддддддддддддддддд
						If AttIsMemberOf(oRetJSON, "ERROR")
							cStatus := oRetJSON:ERROR

							//зддддддддддддддддддддддддддддддддддддддддддддддддддддддд
							//ЁCaso seja um PRODUTOR - INATIVO, altera o seu cadastroЁ
							//юддддддддддддддддддддддддддддддддддддддддддддддддддддддд
							If cStatus == "INVALID_UPDATE"
								//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
								//ЁCaso seja um PRODUTOR - INATIVO, executa ativaГЦo do mesmoЁ
								//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
								oRestClient	:= FWRest():New(cUrl)

								//здддддддддддддддддддддддддддддддддддддддддд
								//ЁSeta parБmetros de execuГЦo da integraГЦoЁ
								//юдддддддддддддддддддддддддддддддддддддддддд
								oRestClient:SetPath("/produtores/" + cId + "/reativar?" + cParam)
								oRestClient:SetPostParams(cJSON)

								//здддддддддддддддддддддд
								//ЁComposiГЦo do aHeaderЁ
								//юдддддддддддддддддддддд
								AADD(aHeader, "Content-Type: application/json")

								//здддддддддддддддддддддддддддддддддддддддддддддддддд
								//ЁExecutra PUT e avalia retorno (sucesso\insucesso)Ё
								//юдддддддддддддддддддддддддддддддддддддддддддддддддд
								If oRestClient:Put(aHeader)

									//здддддддддддддддддддддддддддддддддддддддддд
									//ЁObtИm o retorno da API e converte em JSONЁ
									//юдддддддддддддддддддддддддддддддддддддддддд
									cRetJSON := oRestClient:GetResult()
									FWJsonDeserialize(cRetJSON, @oRetJSON)

									//зддддддддддддддддддддддддддддддддддд
									//ЁObtИm o ID do Fornecedor no MILKUPЁ
									//юддддддддддддддддддддддддддддддддддд
									If AttIsMemberOf(oRetJSON, "ID")

										//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
										//ЁSendo integraГЦo de registro gravado na SA2, atualiza o IDЁ
										//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
										If lRegSA2
											RECLOCK("SA2", .F.)
											SA2->A2_X_MKUID := oRetJSON:ID
											SA2->(MSUNLOCK())
										Else
											//зддддддддддддддддддддддддддддддддддддддддддддддддддддддд
											//ЁSendo integraГЦo de registro em memСria, atualiza o IDЁ
											//юддддддддддддддддддддддддддддддддддддддддддддддддддддддд
											oModelo	:= FWModelActive()
											oModelSA2 := oModelo:GetModel("SA2MASTER")
											oModelSA2:LoadValue("A2_X_MKUID", oRetJSON:ID)
										EndIf
									EndIf
								EndIf
								lRet := U_MLKUPSA2(4, lRegSA2)
							Else
								//зддддддддддддддддддддддддддддддддддддддддддддддддддддддд
								//ЁObtИm o retorno da API e apresenta mensagem ao usuАrioЁ
								//юддддддддддддддддддддддддддддддддддддддддддддддддддддддд
								cRetJSON := oRestClient:GetLastError() + oRestClient:GetResult()
								Help(NIL, NIL, "AtenГЦo", NIL, "NЦo foi possМvel realizar Ю integraГЦo do cadastro do fornecedor com o MilkUp.", 1, 0, NIL, NIL, NIL, NIL, NIL, {"Informe Ю ocorrЙncia ao departamento de TI."})
								Alert(cRetJSON)
								lRet := .F.
							EndIf
						EndIf
					EndIf
				Else
					//здддддддддддддддддддддддддддддддддддддддддд
					//ЁObtИm o retorno da API e converte em JSONЁ
					//юдддддддддддддддддддддддддддддддддддддддддд
					cRetJSON := oRestClient:GetResult()
					FWJsonDeserialize(cRetJSON, @oRetJSON)

					//зддддддддддддддддддддддддддддддддддд
					//ЁObtИm o local do Fornec   no MILKUPЁ
					//юддддддддддддддддддддддддддддддддддд
					If AttIsMemberOf(oRetJSON, "PRODUCER:END_LATITUDE")
						//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
						//ЁSendo integraГЦo de registro gravado na SA2, atualiza LOCALЁ
						//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
						If lRegSA2
							RECLOCK("SA2", .F.)
							SA2->A2_X_LOCAL := oRetJSON:PRODUCER:END_LATITUDE+","+oRetJSON:PRODUCER:END_LONGITUDE
							SA2->(MSUNLOCK())
						EndIf
					EndIf
				EndIf
			Else
				//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
				//ЁQuando o fornecedor nЦo estА integrado, executa regras visando integraГЦo do mesmoЁ
				//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
				lRet := U_MLKUPSA2(3, lRegSA2)
			EndIf




			//зддддддддддддддддддддддддддддддддддддддддддд
			//ЁExecuta API REST de EXCLUSцO de produtoresЁ
			//юддддддддддддддддддддддддддддддддддддддддддд
		Case nOper == 5

			//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
			//ЁExecuta regras de inclusЦo, caso o fornecedor alterado esteja integrado com o MilkUpЁ
			//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
			If !EMPTY(cA2_X_MKUID)
				cId := cA2_X_MKUID

				//здддддддддддддддддддддддддддддддддддддддддд
				//ЁSeta parБmetros de execuГЦo da integraГЦoЁ
				//юдддддддддддддддддддддддддддддддддддддддддд
				oRestClient:SetPath("/produtores/" + cId + "?" + cParam)

				//здддддддддддддддддддддддддддддддддддддддддддддддддд
				//ЁExecutra PUT e avalia retorno (sucesso\insucesso)Ё
				//юдддддддддддддддддддддддддддддддддддддддддддддддддд
				If !oRestClient:Delete(aHeader)

					//зддддддддддддддддддддддддддддддддддддддддддддддддддддддд
					//ЁObtИm o retorno da API e apresenta mensagem ao usuАrioЁ
					//юддддддддддддддддддддддддддддддддддддддддддддддддддддддд
					cRetJSON := oRestClient:GetLastError() + oRestClient:GetResult()
					Help(NIL, NIL, "AtenГЦo", NIL, "NЦo foi possМvel realizar Ю integraГЦo do cadastro do fornecedor com o MilkUp.", 1, 0, NIL, NIL, NIL, NIL, NIL, {"Informe Ю ocorrЙncia ao departamento de TI."})
					Alert(cRetJSON)

					lRet := .F.
				EndIf
			EndIf
		EndCase
	EndIf

Return lRet





/*
эээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээ
╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠
╠╠иммммммммммяммммммммммкмммммммямммммммммммм`ммммммммкммммммямммммммммммм╩╠╠
╠╠╨Programa  ЁMLKUPZL6  ╨Autor  ЁMarcelo Joner        ╨ Data Ё 03/04/2020 ╨╠╠
╠╠лммммммммммьммммммммммймммммммоммммммммммммммммммммйммммммоммммммммммммм╧╠╠
╠╠╨Desc.     ЁFunГЦo de integraГЦo cadastro de coletas com Ю API REST do  ╨╠╠
╠╠╨          Ёsoftware MilkUp.                                            ╨╠╠
╠╠лммммммммммьмммммммммммммммммммммммммммммммммммммммммммммммммммммммммммм╧╠╠
╠╠╨Uso       ЁLaticinios Silvestre                                        ╨╠╠
╠╠хммммммммммомммммммммммммммммммммммммммммммммммммммммммммммммммммммммммм╪╠╠
╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠
ъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъ
*/
User Function MLKUPZL6(nOper)

	Local lRet			:= .T.
	Local nI, nt1, nt	:= 0
	Local nY			:= 0
	Local nW			:= 0
	Local aHeader		:= {}
	Local cToken		:= ALLTRIM(GETMV("MV_ZL00007",, ""))
	Local cParam		:= "api_key=" + cToken
	Local cUrl			:= "https://api.milkup.com.br/sync"
	Local cIdUsr		:= "48e38f57-d831-43bc-8b0a-0e9c64a59896"
	Local cNmUsr		:= "TOTVS"
	Local cUserAlt		:= UPPER(ALLTRIM(FwGetUserName(RetCodUsr())))
	Local oRetJSON
	Local oRestClient
	Local cA2_FILIAL
	Local nDiasCol		:= GETMV("MV_ZL00014",, 0)
	Local cAliasTMP 	:= GetNextAlias()
	Local hEnter    	:= CHR(13) + CHR(10)
	Local cEmailTo 		:= "ti@trelac.com.br"
	Local cMV_WFDIR		:= AllTrim(GetMV("MV_WFDIR"  ))		// Diretorio de trabalho do Workflow
	Local cArqHtml		:= cMV_WFDIR +"\WfAPIMkp.htm"
	Local oWFProc		:= nil
	Local cCodProces	:= "SENDWFMK1"
	LOCAL _cAssunto		:= "[TRELAC] FALHA INTEG. DE COLETA"
	Local lExitColeta	:= .F.
	Local nVolAtual		:= 0
	Local nColTmp		:= 0
	Default nOper		:= 0



//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
//ЁExecuta regras de integraГЦo caso exista Token configuradoЁ
//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
	If !EMPTY(cToken)

		//зддддддддддддддддддддддддддддддддддддддддддддддддддддд
		//ЁCria objeto da clase FWRest para executar integraГЦoЁ
		//юддддддддддддддддддддддддддддддддддддддддддддддддддддд
		oRestClient	:= FWRest():New(cUrl)

		//зддддддддддддддддддддддддддддддддддддддддддддд
		//ЁPosiciona no cadastro do Fornecedor\ProdutorЁ
		//юддддддддддддддддддддддддддддддддддддддддддддд
		dbSelectArea("SA2")
		SA2->(dbSetOrder(1))
		SA2->(dbGoTop())
		SA2->(dbSeek(xFilial("SA2") + ZL6->ZL6_PRODUT + ZL6->ZL6_LOJPRD))

		//здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
		//ЁPrepara variaveis para definiГЦo dos atributos de execuГЦo da APIЁ
		//юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
		If nOper == 3 .OR. nOper == 4
			cHrCl := IIF(!EMPTY(ZL6->ZL6_HORCOL), ZL6->ZL6_HORCOL, SUBSTR(TIME(), 1, 5)) + ":00"
			dDtCl := IIF(!EMPTY(ZL6->ZL6_DTCOL), ZL6->ZL6_DTCOL, ZL5->ZL5_DATA)
			cDtHr := Year2Str(dDtCl) + "-" + Month2Str(dDtCl) + "-" + Day2Str(dDtCl) + " " + cHrCl

			//здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
			//ЁVincula Ю quantidade da amostra ao primeiro Tanque identificadoЁ
			//юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
			aQtTq := {0,0,0,0,0,0,0}
			cDtTq := ALLTRIM(ZL6->ZL6_TANQUE)
			For nt1 := 1 To Len(aQtTq)
				If ALLTRIM(STR(nt1)) $ cDtTq
					aQtTq[nt1] := ZL6->ZL6_QTDE
					exit
				EndIf
			Next nt1

			//здддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
			//ЁDefine ID da Filial Ю partir do inicio do cСdigo da LinhaЁ
			//юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
			If SUBSTR(ALLTRIM(ZL5->ZL5_LINHA),01,02) == "TB" .OR. EMPTY(ALLTRIM(ZL5->ZL5_LINHA))
				cA2_FILIAL := "d32f1605-a61e-4411-a9e8-0e14c4e2bb0d"
			ElseIf SUBSTR(ALLTRIM(ZL5->ZL5_LINHA),01,02) == "MC"
				cA2_FILIAL := "44c18b1d-7b69-4f36-ad9c-b1d17ec4b17c"
			EndIf

			//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
			//ЁMonta variavel com os atributos necessАrios para execuГЦo da APIЁ
			//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
			If nOper == 4 .AND. !Empty(ZL6->ZL6_MKUID)
				cJSON := '{'
				cJSON += '"id_laticinio":"' + cA2_FILIAL + '",'
				cJSON += '"nome_pessoa_registro":"' + cUserAlt + '",'
				cJSON += '"data":"' + cDtHr + '",'
				cJSON += '"temperatura": ' + ALLTRIM(STR(ZL6->ZL6_TEMPER)) + ','
				cJSON += '"numero_amostra":"' + IIF(!EMPTY(ZL6->ZL6_AMOSTR), ALLTRIM(ZL6->ZL6_AMOSTR), "000000") + '",'
				cJSON += '"quantidade_coleta": ' + ALLTRIM(STR(ZL6->ZL6_QTDE)) + ','
				cJSON += '"tanque1": ' + ALLTRIM(STR(aQtTq[1])) + ','
				cJSON += '"tanque2": ' + ALLTRIM(STR(aQtTq[2])) + ','
				cJSON += '"tanque3": ' + ALLTRIM(STR(aQtTq[3])) + ','
				cJSON += '"tanque4": ' + ALLTRIM(STR(aQtTq[4])) + ','
				cJSON += '"tanque5": ' + ALLTRIM(STR(aQtTq[5])) + ','
				cJSON += '"tanque6": ' + ALLTRIM(STR(aQtTq[6])) + ','
				cJSON += '"tanque7": ' + ALLTRIM(STR(aQtTq[7])) + ','
				cJSON += '"observacao":"COLETA ALTERADA VIA ERP TOTVS POR: ' + cUserAlt + '",'
				cJSON += '"codigo_produtor":"' + ALLTRIM(SA2->A2_COD) + "-" + ALLTRIM(SA2->A2_LOJA) + '"'
				cJSON += '}'
			Else
				cJSON := '{'
				cJSON += '"id_laticinio":"' + cA2_FILIAL + '",'
				cJSON += '"id_usuario_coleta":"' + cIdUsr + '",'
				cJSON += '"nome_usuario_coleta":"' + cUserAlt + '",'
				cJSON += '"placa":"' + IIF(!EMPTY(ZL6->ZL6_PLACA), ALLTRIM(ZL6->ZL6_PLACA), "SEM PLACA") + '",'
				cJSON += '"data":"' + cDtHr + '",'
				cJSON += '"temperatura": ' + ALLTRIM(STR(ZL6->ZL6_TEMPER)) + ','
				cJSON += '"numero_amostra":"' + IIF(!EMPTY(ZL6->ZL6_AMOSTR), ALLTRIM(ZL6->ZL6_AMOSTR), "000000") + '",'
				cJSON += '"alizarol":"Negativo",'
				cJSON += '"quantidade_coleta": ' + ALLTRIM(STR(ZL6->ZL6_QTDE)) + ','
				cJSON += '"tanque1": ' + ALLTRIM(STR(aQtTq[1])) + ','
				cJSON += '"tanque2": ' + ALLTRIM(STR(aQtTq[2])) + ','
				cJSON += '"tanque3": ' + ALLTRIM(STR(aQtTq[3])) + ','
				cJSON += '"tanque4": ' + ALLTRIM(STR(aQtTq[4])) + ','
				cJSON += '"tanque5": ' + ALLTRIM(STR(aQtTq[5])) + ','
				cJSON += '"tanque6": ' + ALLTRIM(STR(aQtTq[6])) + ','
				cJSON += '"tanque7": ' + ALLTRIM(STR(aQtTq[7])) + ','
				cJSON += '"latitude":"SEM DADOS",'
				cJSON += '"longitude":"SEM DADOS",'
				cJSON += '"observacao":"COLETA REGISTRADA VIA ERP TOTVS POR: ' + cUserAlt + '",'
				cJSON += '"veiculo":"SEM VEICULO",'
				cJSON += '"codigo_produtor":"' + ALLTRIM(SA2->A2_COD) + "-" + ALLTRIM(SA2->A2_LOJA) + '"'
				cJSON += '}'
			EndIf
		EndIf

		Do Case

			//здддддддддддддддддддддддддддддддддддддддд
			//ЁExecuta API REST de CONSULTA de coletasЁ
			//юдддддддддддддддддддддддддддддддддддддддд
		Case nOper == 2

			//зддддддддддддддддддддддддддддддддддддддддддддд
			//ЁCompУe variavel de parБmetro adicional Ю APIЁ
			//юддддддддддддддддддддддддддддддддддддддддддддд
			dDtSyn := dDataBase - nDiasCol
			cHrSyn := "00:00:01"
			cLastSyn := "last_synced_at=" + Year2Str(dDtSyn) + "-" + Month2Str(dDtSyn) + "-" + Day2Str(dDtSyn) + " " + cHrSyn
			//cLastSyn := "last_synced_at=2020-01-01 00:00:01"

			//здддддддддддддддддддддддддддддддддддддддддд
			//ЁSeta parБmetros de execuГЦo da integraГЦoЁ
			//юдддддддддддддддддддддддддддддддддддддддддд
			oRestClient:SetPath("/coletas?" + cLastSyn + "&" + cParam)

			//здддддддддддддддддддддд
			//ЁComposiГЦo do aHeaderЁ
			//юдддддддддддддддддддддд
			AADD(aHeader, "Content-Type: application/json")

			//здддддддддддддддддддддддддддддддддддддддддддддддддд
			//ЁExecutra GET e avalia retorno (sucesso\insucesso)Ё
			//юдддддддддддддддддддддддддддддддддддддддддддддддддд
			If oRestClient:Get(aHeader)

				//здддддддддддддддддддддддддддддддддддддддддд
				//ЁObtИm o retorno da API e converte em JSONЁ
				//юдддддддддддддддддддддддддддддддддддддддддд
				cRetJSON := oRestClient:GetResult()
				FWJsonDeserialize(cRetJSON, @oRetJSON)

				//здддддддддддддддддддддддддддддддддддддддддддддддддддд
				//ЁHavendo array privado de integraГЦo, popula o mesmoЁ
				//юдддддддддддддддддддддддддддддддддддддддддддддддддддд
				If ValType(aDetMilk) == "A"
					aDetMilk := {}

					//здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
					//ЁExecuta laГo para processamento de todas as coletas obtidasЁ
					//юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
					For nI := 1 To Len(oRetJSON)

						//зддддддддддддддддддддддддддддддддддддддддддддддддддддд
						//ЁPrepara variaveis com as informaГУes da coleta atualЁ
						//юддддддддддддддддддддддддддддддддддддддддддддддддддддд
						nVolAtual	:= 0
						lExitColeta := .F.
						lAchou  := .F.
						cFilCol := ""
						cCodLin := ""
						cFilCol := IIF(AttIsMemberOf(oRetJSON[nI], "ID_LATICINIO"), oRetJSON[nI]:ID_LATICINIO, "")
						cCodFor := IIF(AttIsMemberOf(oRetJSON[nI], "CODIGO_PRODUTOR"), SUBSTR(oRetJSON[nI]:CODIGO_PRODUTOR, 1, AT("-", oRetJSON[nI]:CODIGO_PRODUTOR)-1), "")
						cLojFor := IIF(AttIsMemberOf(oRetJSON[nI], "CODIGO_PRODUTOR"), SUBSTR(oRetJSON[nI]:CODIGO_PRODUTOR, AT("-", oRetJSON[nI]:CODIGO_PRODUTOR)+1, 10), "")
						cNmForn	:= IIF(AttIsMemberOf(oRetJSON[nI], "NOME_PRODUTOR"), oRetJSON[nI]:NOME_PRODUTOR, "")
						cDetLoc := ""
						nQtdVol := IIF(AttIsMemberOf(oRetJSON[nI], "QUANTIDADE_COLETA"), VAL(oRetJSON[nI]:QUANTIDADE_COLETA), 0)
						nVolOri := IIF(AttIsMemberOf(oRetJSON[nI], "QUANTIDADE_ORIGINAL"), IIF(oRetJSON[nI]:QUANTIDADE_ORIGINAL <> '0.0000', VAL(oRetJSON[nI]:QUANTIDADE_ORIGINAL),0), 0)
						nDetTem := IIF(AttIsMemberOf(oRetJSON[nI], "TEMPERATURA"), VAL(oRetJSON[nI]:TEMPERATURA), 0)
						cDetTnq := ""
						cDetAmo := IIF(AttIsMemberOf(oRetJSON[nI], "NUMERO_AMOSTRA"), oRetJSON[nI]:NUMERO_AMOSTRA, "")
						cHorCol := IIF(AttIsMemberOf(oRetJSON[nI], "HORA_CHEGADA"), oRetJSON[nI]:HORA_CHEGADA, "")
						cIdeCol := IIF(AttIsMemberOf(oRetJSON[nI], "ID_COLETA"), oRetJSON[nI]:ID_COLETA, "")
						cIdeDis := IIF(AttIsMemberOf(oRetJSON[nI], "ID_EQUIPAMENTO"), IIF(oRetJSON[nI]:ID_EQUIPAMENTO != NIL, oRetJSON[nI]:ID_EQUIPAMENTO, ""), "")
						cDatCol := IIF(AttIsMemberOf(oRetJSON[nI], "DATA"), STOD(SUBSTR(oRetJSON[nI]:DATA, 1, 4) + SUBSTR(oRetJSON[nI]:DATA, 6, 2) + SUBSTR(oRetJSON[nI]:DATA, 9, 2)), "")
						cDatReg := IIF(AttIsMemberOf(oRetJSON[nI], "DATA_HORA_REGISTRO"), STOD(SUBSTR(oRetJSON[nI]:DATA_HORA_REGISTRO, 1, 4) + SUBSTR(oRetJSON[nI]:DATA_HORA_REGISTRO, 6, 2) + SUBSTR(oRetJSON[nI]:DATA_HORA_REGISTRO, 9, 2)), "")
						cObserv := IIF(AttIsMemberOf(oRetJSON[nI], "OBSERVACAO"),oRetJSON[nI]:OBSERVACAO , "")
						cMotori := IIF(AttIsMemberOf(oRetJSON[nI], "NOME_USUARIO_COLETA"),oRetJSON[nI]:NOME_USUARIO_COLETA , "")
						cRotCol := IIF(AttIsMemberOf(oRetJSON[nI], "NOME_ROTA"),oRetJSON[nI]:NOME_ROTA , "")
						If !Empty(alltrim(cObserv))
							cObserv := decodeUTF8(cObserv,"cp1252")
						EndIf
						IF Empty(oRetJSON[nI]:ITINERARIO_DATA_HORA_FIM)
							cDatIti := ""//IIF(AttIsMemberOf(oRetJSON[nI], "DATA"), STOD(SUBSTR(oRetJSON[nI]:DATA, 1, 4) + SUBSTR(oRetJSON[nI]:DATA, 6, 2) + SUBSTR(oRetJSON[nI]:DATA, 9, 2)), "")
						Else
							cDatIti := IIF(AttIsMemberOf(oRetJSON[nI], "ITINERARIO_DATA_HORA_FIM"), STOD(SUBSTR(oRetJSON[nI]:ITINERARIO_DATA_HORA_FIM, 1, 4) + SUBSTR(oRetJSON[nI]:ITINERARIO_DATA_HORA_FIM, 6, 2) + SUBSTR(oRetJSON[nI]:ITINERARIO_DATA_HORA_FIM, 9, 2)), "")
						EndIf
						cDetPla := IIF(AttIsMemberOf(oRetJSON[nI], "PLACA"), oRetJSON[nI]:PLACA, "")
						cItner := IIF(AttIsMemberOf(oRetJSON[nI], "ID_ITINERARIO"), oRetJSON[nI]:ID_ITINERARIO, "")
						cDetPla := STRTRAN(ALLTRIM(cDetPla)," ","")

						//здддддддддддддддддддддддддддддддддддд
						//ЁPosiciona no cadastro do FornecedorЁ
						//юдддддддддддддддддддддддддддддддддддд
						dbSelectArea("SA2")
						SA2->(dbSetOrder(1))
						SA2->(dbGoTop())
						If SA2->(dbSeek(xFilial("SA2") + PADR(cCodFor, TAMSX3("A2_COD")[1]) + PADR(cLojFor, TAMSX3("A2_COD")[1])))
							//cCodLin := IIF(AttIsMemberOf(oRetJSON[nI], "REGIAO"), IIF(oRetJSON[nI]:REGIAO != NIL,	IIF(oRetJSON[nI]:REGIAO != '', oRetJSON[nI]:REGIAO,	SA2->A2_X_LINHA), SA2->A2_X_LINHA),SA2->A2_X_LINHA)
							//cCodLin := IIF(AttIsMemberOf(oRetJSON[nI], "REGIAO"), IIF(oRetJSON[nI]:REGIAO != NIL, oRetJSON[nI]:REGIAO, SA2->A2_X_LINHA), SA2->A2_X_LINHA)
							cCodLin := ALLTRIM(SA2->A2_X_LINHA)
							//cCodLin := ALLTRIM(cCodLin)
						Else
							//здддддддддддддддддддддддддддддддддддд
							//ЁAdiciona registro no arquivo de logЁ
							//юдддддддддддддддддддддддддддддддддддд
							cDetLog := "01-Fornecedor nЦo localizado: " + PADR(cCodFor, TAMSX3("A2_COD")[1]) + " \ " + PADR(cLojFor, TAMSX3("A2_COD")[1])
							cDetLog := DTOC(DATE()) + "-" + TIME() + "-" + cDetLog + CHR(13) + CHR(10)
							fWrite(nHldLOG,cDetLog,Len(cDetLog))
							CONOUT(cDetLog)
						EndIf


						//здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
						//ЁA partir do cСdigo da LINHA, identifica o cСdigo da filial referente Ю ColetaЁ
						//юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
						If SUBSTR(cCODLIN,01,02) == "TB"
							cFilCol := "01LAT01"
						ElseIf SUBSTR(cCODLIN,01,02) == "GC"
							cFilCol := "01LAT02"
						ElseIf SUBSTR(cCODLIN,01,02) == "MC"
							cFilCol := "01LAT03"
						ElseIf SUBSTR(cCODLIN,01,02) == "SP"
							cFilCol := "01LAT04"
						ElseIf SUBSTR(cCODLIN,01,02) == "NE"
							cFilCol := "01LAT05"
						ElseIf SUBSTR(cCODLIN,01,02) == "PI"
							cFilCol := "01LAT06"
						EndIf


						//зддддддддддддддддддддддддддддддддддддддддддддддддддддд
						//ЁConsidera Ю coleta, caso nЦo exista na base de dadosЁ
						//юддддддддддддддддддддддддддддддддддддддддддддддддддддд

						/*dbSelectArea("ZL6")
						ZL6->(dbSetOrder(5))
						ZL6->(dbGoTop())
						If ZL6->(dbSeek(cFilCol + cIdeCol ))
							nVolAtual	:= ZL6->ZL6_QTDE
							lExitColeta := .T.
						else
							nVolAtual	:= nQtdVol
						EndIf
						ZL6->(dbCloseArea())
						If !lExitColeta
							CONOUT("Insere nova")
						EndIf
						*/

						cQuery := "SELECT ZL6_QTDE VOLUME" 			+ hEnter
						cQuery += "FROM " + RetSQLName("ZL6") + " ZL6 	"	+ hEnter
						cQuery += "WHERE ZL6_MKUID ='" +  cIdeCol  + "'" 	+ hEnter
						
						TCQUERY ChangeQuery( cQuery ) NEW ALIAS (cAliasTMP)
						dbSelectArea(cAliasTMP)
						(cAliasTMP)->(dbGoTop())

						If (cAliasTMP)->VOLUME > 0
							nVolAtual	:= (cAliasTMP)->VOLUME
							lExitColeta := .T.
						else
							nVolAtual	:= nQtdVol
						EndIf
						(cAliasTMP)->(dbCloseArea())
						//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
						//ЁExecuta demais regras havendo identificado o cСdigo da linhaЁ
						//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
						If !EMPTY(ALLTRIM(cCodLin)) .AND. !EMPTY(cDatIti)



							//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
							//ЁExecuta demais regras, caso tenha identificado Ю filial referente a coletaЁ
							//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
							If !EMPTY(cFilCol)


								If !lExitColeta
									//зддддддддддддддддддддддддддддддддддддддддддддддддддд
									//ЁA partir da LINHA, identifica qual o TRANSPORTADORЁ
									//юддддддддддддддддддддддддддддддддддддддддддддддддддд
									dbSelectArea("ZL0")
									ZL0->(dbSetOrder(1))
									ZL0->(dbGoTop())
									If ZL0->(dbSeek(xFilial("ZL0", cFilCol) + cCodLin))
										cCodTra := ZL0->ZL0_TRANSP

										//здддддддддддддддддддддддддддддддддддд
										//ЁIdentifica o tanque de carregamentoЁ
										//юдддддддддддддддддддддддддддддддддддд
										For nW := 1 To 7
											If !Empty(&("oRetJSON[nI]:TANQUE" + ALLTRIM(STR(nW))))
												If VAL(&("oRetJSON[nI]:TANQUE" + ALLTRIM(STR(nW)))) > 0
													cDetTnq += ALLTRIM(STR(nW))
												EndIf
											EndIF
										Next nW
										If Empty(cDetTnq)
											cDetLog := "01-Tanque nЦo preenchido: " + PADR(cCodFor, TAMSX3("A2_COD")[1]) + " \ " + PADR(cLojFor, TAMSX3("A2_COD")[1])
											cDetLog := DTOC(DATE()) + "-" + TIME() + "-" + cDetLog + CHR(13) + CHR(10)
											fWrite(nHldLOG,cDetLog,Len(cDetLog))
											CONOUT(cDetLog)
										EndIf
										//зддддддддддддддддддддддддддддддддддддддддддддддддд
										//ЁPrepara array com as informaГУes da coleta atualЁ
										//юддддддддддддддддддддддддддддддддддддддддддддддддд
										aDetCol := {cCodFor, cLojFor, cDetLoc, nQtdVol, nDetTem, cDetTnq, cDetAmo, cHorCol, cIdeCol, cIdeDis, cDatCol, cDetPla, cItner, nVolOri}

										//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
										//ЁAtualiza array de dados com as informaГУes da coleta atualЁ
										//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
										For nY := 1 To Len(aDetMilk)
											If aDetMilk[nY][1] == cCodLin .AND. aDetMilk[nY][2] == cDatIti .AND. aDetMilk[nY][3] == cCodTra .AND. aDetMilk[nY][4] == cDetPla .AND. aDetMilk[nY][5] == cItner
												AADD(aDetMilk[nY][6], aClone(aDetCol))
												lAchou := .T.
												exit
											EndIf
										Next nY

										//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
										//ЁNЦo havendo coletas para Ю LINHA, DATA e TRANSPORTADOR, adiciona os mesmos ao array de dadosЁ
										//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
										If !lAchou
											AADD(aDetMilk, {cCodLin, cDatIti, cCodTra, cDetPla, cItner, {aClone(aDetCol)}})
										EndIf
									Else
										//здддддддддддддддддддддддддддддддддддд
										//ЁAdiciona registro no arquivo de logЁ
										//юдддддддддддддддддддддддддддддддддддд
										cDetLog := "01-Transportador nЦo localizado: " + cCodLin
										cDetLog := DTOC(DATE()) + "-" + TIME() + "-" + cDetLog + CHR(13) + CHR(10)
										fWrite(nHldLOG,cDetLog,Len(cDetLog))
										CONOUT(cDetLog)
									EndIf

								ElseIf nVolAtual <> nQtdVol //Altera volume da coleta conforme Milkup

									cQuery := "SELECT ZL6_QTDE VOLUME, ZL6_TANQUE TANQUE," 			+ hEnter
									cQuery += "SUBSTRING(ZL6_USERGA, 11,1)+SUBSTRING(ZL6_USERGA, 15,1)+SUBSTRING(ZL6_USERGA, 2, 1)+SUBSTRING(ZL6_USERGA, 6, 1)+SUBSTRING(ZL6_USERGA, 10,1)+SUBSTRING(ZL6_USERGA, 14,1)+SUBSTRING(ZL6_USERGA, 1, 1)+SUBSTRING(ZL6_USERGA, 5, 1)+SUBSTRING(ZL6_USERGA, 9, 1)+SUBSTRING(ZL6_USERGA, 13,1)+SUBSTRING(ZL6_USERGA, 17,1)+SUBSTRING(ZL6_USERGA, 4, 1)+SUBSTRING(ZL6_USERGA, 8, 1) USUARIO,"+ hEnter
									cQuery += "CONVERT(VARCHAR,DATEADD(DAY,((ASCII(SUBSTRING(ZL6_USERGA,12,1)) - 50) * 100 + (ASCII(SUBSTRING(ZL6_USERGA,16,1)) - 50)),'19960101'),112) DTALT"+ hEnter
									cQuery += "FROM " + RetSQLName("ZL6") + " ZL6 	"	+ hEnter
									cQuery += "WHERE ZL6_MKUID ='" +  cIdeCol  + "'" 	+ hEnter
									cQuery += "AND ZL6.D_E_L_E_T_ <> '*'" 	+ hEnter


									TCQUERY ChangeQuery( cQuery ) NEW ALIAS (cAliasTMP)
									dbSelectArea(cAliasTMP)
									(cAliasTMP)->(dbGoTop())

									//nColTmp := (cAliasTMP)->VOLUME

									//здддддддддддддддддддддддддддддддддддд
									//ЁAdiciona registro no arquivo de logЁ
									//юдддддддддддддддддддддддддддддддддддд
									cDetLog := "01-Coleta jА existente na filial: " + xFilial("ZL6", cFilCol) + " ID " + cIdeCol + " Vol. Orig: " + alltrim(str(nVolOri)) + " Vol. novo : " + alltrim(str(nQtdVol))
									cDetLog := DTOC(DATE()) + "-" + TIME() + "-" + cDetLog + CHR(13) + CHR(10)
									fWrite(nHldLOG,cDetLog,Len(cDetLog))
									CONOUT(cDetLog)

									If nVolOri <> nQtdVol .OR. (cAliasTMP)->VOLUME <> nQtdVol

										If SUBSTR(ALLTRIM(cCodLin),01,02) == "TB" .OR. EMPTY(ALLTRIM(cCodLin))
											cA2_FILIAL := "d32f1605-a61e-4411-a9e8-0e14c4e2bb0d"
										ElseIf SUBSTR(ALLTRIM(cCodLin),01,02) == "MC"
											cA2_FILIAL := "44c18b1d-7b69-4f36-ad9c-b1d17ec4b17c"
										EndIf

										dbSelectArea("ZL6")
										ZL6->(dbSetOrder(5))
										ZL6->(dbGoTop())

										If ZL6->(dbSeek(cFilCol + cIdeCol ))
												//obs aqui
											If (cAliasTMP)->VOLUME <> nQtdVol .AND. (cDatReg > STOD((cAliasTMP)->DTALT) .OR. (cDatReg = STOD((cAliasTMP)->DTALT) .AND. Empty(alltrim((cAliasTMP)->USUARIO))))

												If RECLOCK("ZL6", .F.)
													ZL6->ZL6_QTDE := nQtdVol
													ZL6->ZL6_IDMOB := 0
													ZL6->(MSUNLOCK())

													cDetLog := "02-Quantidade Alterada Via Milkup: " + xFilial("ZL6", cFilCol) + " ID " + cIdeCol + " Vol. Orig: " + alltrim(str(nVolOri)) + " Vol. novo : " + alltrim(str(nQtdVol))
													cDetLog := DTOC(DATE()) + "-" + TIME() + "-" + cDetLog + CHR(13) + CHR(10)
													fWrite(nHldLOG,cDetLog,Len(cDetLog))
													CONOUT(cDetLog)

													If alltrim(cA2_FILIAL) = "d32f1605-a61e-4411-a9e8-0e14c4e2bb0d"
														cEmailTo := SuperGetMV("MX_ECOLTB",,.F.)
													ElseIf alltrim(cA2_FILIAL) = "44c18b1d-7b69-4f36-ad9c-b1d17ec4b17c"
														cEmailTo := SuperGetMV("MX_ECOLMC",,.F.)
													ENDIF

													cMV_WFDIR		:= AllTrim(GetMV("MV_WFDIR"  ))		// Diretorio de trabalho do Workflow
													cArqHtml		:= cMV_WFDIR +"\WfAPIMkp2.htm"
													oWFProc		:= nil
													cCodProces	:= "SENDWMKP1"
													_cAssunto		:= "[TRELAC] Quantidade Alterada Via Milkup"

													oWFProc := TWFProcess():New(cCodProces, _cAssunto)
													oWFProc:NewTask(_cAssunto, cArqHtml)
													oWFProc:cTo      := cEmailTo
													oWFProc:cSubject := _cAssunto
													oWFProc:oHtml:ValByName("D_DATABASE"       , DDATABASE ) //
													oWFProc:oHtml:ValByName("PRODUTOR"       , cCodFor + "-" + cLojFor )
													oWFProc:oHtml:ValByName("NOME"       , cNmForn )
													oWFProc:oHtml:ValByName("VOLUME"       , nQtdVol )
													oWFProc:oHtml:ValByName("VOLORI"       , nVolOri )
													oWFProc:oHtml:ValByName("LINHA"       , cCodLin )
													oWFProc:oHtml:ValByName("DTCOLETA"       , cDatCol )
													oWFProc:oHtml:ValByName("USER"       , UPPER(ALLTRIM(FwGetUserName((cAliasTMP)->USUARIO))) )
													oWFProc:oHtml:ValByName("PROBLEMA"       , "AlteraГЦo de coleta " + " - " +  cObserv)
													oWFProc:Start()
												EndIf
											Else

												cHrCl := IIF(!EMPTY(ZL6->ZL6_HORCOL), ZL6->ZL6_HORCOL, SUBSTR(TIME(), 1, 5)) + ":00"
												dDtCl := STOD((cAliasTMP)->DTALT)
												cDtHr := Year2Str(dDtCl) + "-" + Month2Str(dDtCl) + "-" + Day2Str(dDtCl) + " " + cHrCl

												aQtTq := {0,0,0,0,0,0,0}
												cDtTq := ALLTRIM((cAliasTMP)->TANQUE)
												For nt := 1 To Len(aQtTq)
													If ALLTRIM(STR(nt)) $ cDtTq
														aQtTq[nt] := (cAliasTMP)->VOLUME
														exit
													EndIf
												Next nt



												cJSON := '{'
												cJSON += '"id_laticinio":"' + cA2_FILIAL + '",'
												cJSON += '"nome_pessoa_registro":"' + UPPER(ALLTRIM(FwGetUserName((cAliasTMP)->USUARIO))) + '",'
												cJSON += '"quantidade_coleta": ' + ALLTRIM(STR((cAliasTMP)->VOLUME)) + ','
												cJSON += '"tanque1": ' + ALLTRIM(STR(aQtTq[1])) + ','
												cJSON += '"tanque2": ' + ALLTRIM(STR(aQtTq[2])) + ','
												cJSON += '"tanque3": ' + ALLTRIM(STR(aQtTq[3])) + ','
												cJSON += '"tanque4": ' + ALLTRIM(STR(aQtTq[4])) + ','
												cJSON += '"tanque5": ' + ALLTRIM(STR(aQtTq[5])) + ','
												cJSON += '"tanque6": ' + ALLTRIM(STR(aQtTq[6])) + ','
												cJSON += '"tanque7": ' + ALLTRIM(STR(aQtTq[7])) + ','
												cJSON += '"observacao":"COLETA ALTERADA VIA ERP TOTVS POR: ' + UPPER(ALLTRIM(FwGetUserName((cAliasTMP)->USUARIO))) + '",'
												cJSON += '"codigo_produtor":"' + ALLTRIM(cCodFor) + "-" + ALLTRIM(cLojFor) + '"'
												cJSON += '}'

												//здддддддддддддддддддддддддддддддддддддддддд
												//ЁSeta parБmetros de execuГЦo da integraГЦoЁ
												//юдддддддддддддддддддддддддддддддддддддддддд
												oRestClient:SetPath("/coletas/" + cIdeCol + "?" + cParam)

												//здддддддддддддддддддддд
												//ЁComposiГЦo do aHeaderЁ
												//юдддддддддддддддддддддд
												AADD(aHeader, "Content-Type: application/json")

												//здддддддддддддддддддддддддддддддддддддддддддддддддд
												//ЁExecutra PUT e avalia retorno (sucesso\insucesso)Ё
												//юдддддддддддддддддддддддддддддддддддддддддддддддддд
												If !oRestClient:Put(aHeader, cJSON)

													//здддддддддддддддддддддддддддддддддддддддддд
													//ЁObtИm o retorno da API e converte em JSONЁ
													//юдддддддддддддддддддддддддддддддддддддддддд
													cRetJSON := oRestClient:GetLastError() + oRestClient:GetResult()

													//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
													//ЁApresenta mensagem ao usuАrio alertando em tonro da questЦo e nЦo permite Ю inclusЦo do FornecedorЁ
													//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
													Help(NIL, NIL, "AtenГЦo", NIL, "NЦo foi possМvel realizar Ю integraГЦo da coleta do produtor com o MilkUp.", 1, 0, NIL, NIL, NIL, NIL, NIL, {"Informe Ю ocorrЙncia ao departamento de TI."})
													Alert(cRetJSON)

													lRet := .F.
												EndIf


											EndIf
											ZL6->(dbCloseArea())
										EndIf
									EndIf
									(cAliasTMP)->(dbCloseArea())
								EndIf
							Else
								//здддддддддддддддддддддддддддддддддддд
								//ЁAdiciona registro no arquivo de logЁ
								//юдддддддддддддддддддддддддддддддддддд
								cDetLog := "01-Filial nЦo identificada para linha : " + cCODLIN + " e coleta ID " + cIdeCol
								cDetLog := DTOC(DATE()) + "-" + TIME() + "-" + cDetLog + CHR(13) + CHR(10)
								fWrite(nHldLOG,cDetLog,Len(cDetLog))
								CONOUT(cDetLog)
							EndIf
						ElseIf EMPTY(ALLTRIM(cCodLin))


							If alltrim(cFilCol) = "d32f1605-a61e-4411-a9e8-0e14c4e2bb0d"
								cEmailTo := SuperGetMV("MX_ECOLTB",,.F.)
							ElseIf alltrim(cFilCol) = "44c18b1d-7b69-4f36-ad9c-b1d17ec4b17c"
								cEmailTo := SuperGetMV("MX_ECOLMC",,.F.)
							ENDIF

							
							dbSelectArea("ZLK")
							dbSetOrder(1)

							If SuperGetMV("MX_SDWFMKP",,.F.) .AND. !(dbSeek(xFilial("ZLK")+cIdeCol))

								cDetLog := "01-Produtor nЦo vinculado a uma Linha de coleta, Prod.: " + cCodFor + "-" + cLojFor +" e coleta ID " + cIdeCol + " - Email: " + cEmailTo + " - Data Itin: " + DTOC(cDatIti)
								cDetLog := CHR(13) + CHR(10) + cDetLog + CHR(13) + CHR(10)
								fWrite(nHldLOG,cDetLog,Len(cDetLog))
								CONOUT(cDetLog)

								oWFProc := TWFProcess():New(cCodProces, _cAssunto)
								oWFProc:NewTask(_cAssunto, cArqHtml)
								oWFProc:cTo      := cEmailTo
								oWFProc:cSubject := _cAssunto
								oWFProc:oHtml:ValByName("D_DATABASE"       , DDATABASE ) //
								oWFProc:oHtml:ValByName("PRODUTOR"       , cCodFor + "-" + cLojFor )
								oWFProc:oHtml:ValByName("NOME"       , cNmForn )
								oWFProc:oHtml:ValByName("VOLUME"       , nQtdVol )
								oWFProc:oHtml:ValByName("DTCOLETA"       , cDatCol )
								oWFProc:oHtml:ValByName("MOTORISTA"       , cMotori )
								oWFProc:oHtml:ValByName("ROTA"       , cRotCol )
								oWFProc:oHtml:ValByName("PROBLEMA"       , "Produtor nЦo vinculado a uma Linha de coleta" )
								
								//oWFProc:Start()
								If RecLock("ZLK",.T.)
									ZLK->ZLK_MKUID := cIdeCol
									MsUnLock()
								EndIf
							EndIf
							ZLK->(DbCloseArea())
							
						EndIf

					Next nI
				EndIf
			Else
				//здддддддддддддддддддддддддддддддддддддддддд
				//ЁObtИm o retorno da API e converte em JSONЁ
				//юдддддддддддддддддддддддддддддддддддддддддд
				cRetJSON := oRestClient:GetLastError() + oRestClient:GetResult()

				//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
				//ЁApresenta mensagem ao usuАrio alertando em tonro da questЦo e nЦo permite Ю inclusЦo da ColetaЁ
				//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
				Help(NIL, NIL, "AtenГЦo", NIL, "NЦo foi possМvel realizar Ю integraГЦo das coletas de produtores com o MilkUp.", 1, 0, NIL, NIL, NIL, NIL, NIL, {"Informe Ю ocorrЙncia ao departamento de TI."})
				Alert(cRetJSON)

				lRet := .F.
			EndIf




			//здддддддддддддддддддддддддддддддддддддддд
			//ЁExecuta API REST de INCLUSцO de coletasЁ
			//юдддддддддддддддддддддддддддддддддддддддд
		Case nOper == 3

			//здддддддддддддддддддддддддддддддддддддддддд
			//ЁSeta parБmetros de execuГЦo da integraГЦoЁ
			//юдддддддддддддддддддддддддддддддддддддддддд
			oRestClient:SetPath("/coletas?" + cParam)
			oRestClient:SetPostParams(cJSON)

			//здддддддддддддддддддддд
			//ЁComposiГЦo do aHeaderЁ
			//юдддддддддддддддддддддд
			AADD(aHeader, "Content-Type: application/json")

			//зддддддддддддддддддддддддддддддддддддддддддддддддддд
			//ЁExecutra POST e avalia retorno (sucesso\insucesso)Ё
			//юддддддддддддддддддддддддддддддддддддддддддддддддддд
			If oRestClient:Post(aHeader)

				//здддддддддддддддддддддддддддддддддддддддддд
				//ЁObtИm o retorno da API e converte em JSONЁ
				//юдддддддддддддддддддддддддддддддддддддддддд
				cRetJSON := oRestClient:GetResult()
				FWJsonDeserialize(cRetJSON, @oRetJSON)

				//зддддддддддддддддддддддддддддддд
				//ЁObtИm o ID da Coleta no MILKUPЁ
				//юддддддддддддддддддддддддддддддд
				If AttIsMemberOf(oRetJSON, "ID")
					RECLOCK("ZL6", .F.)
					ZL6->ZL6_MKUID := oRetJSON:ID
					ZL6->(MSUNLOCK())
				EndIf
			Else
				//здддддддддддддддддддддддддддддддддддддддддд
				//ЁObtИm o retorno da API e converte em JSONЁ
				//юдддддддддддддддддддддддддддддддддддддддддд
				cRetJSON := oRestClient:GetLastError() + oRestClient:GetResult()

				//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
				//ЁApresenta mensagem ao usuАrio alertando em tonro da questЦo e nЦo permite Ю inclusЦo da ColetaЁ
				//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
				Help(NIL, NIL, "AtenГЦo", NIL, "NЦo foi possМvel realizar Ю integraГЦo da coleta do produtor com o MilkUp.", 1, 0, NIL, NIL, NIL, NIL, NIL, {"Informe Ю ocorrЙncia ao departamento de TI."})
				Alert(cRetJSON)

				lRet := .F.
			EndIf




			//зддддддддддддддддддддддддддддддддддддддддд
			//ЁExecuta API REST de ALTERAгцO de coletasЁ
			//юддддддддддддддддддддддддддддддддддддддддд
		Case nOper == 4

			//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
			//ЁExecuta regras de alteraГЦo, caso o Mov. Produtor alterado esteja integrado com o MilkUpЁ
			//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
			If !EMPTY(ZL6->ZL6_MKUID)
				cId := ZL6->ZL6_MKUID

				//здддддддддддддддддддддддддддддддддддддддддд
				//ЁSeta parБmetros de execuГЦo da integraГЦoЁ
				//юдддддддддддддддддддддддддддддддддддддддддд
				oRestClient:SetPath("/coletas/" + cId + "?" + cParam)

				//здддддддддддддддддддддд
				//ЁComposiГЦo do aHeaderЁ
				//юдддддддддддддддддддддд
				AADD(aHeader, "Content-Type: application/json")

				//здддддддддддддддддддддддддддддддддддддддддддддддддд
				//ЁExecutra PUT e avalia retorno (sucesso\insucesso)Ё
				//юдддддддддддддддддддддддддддддддддддддддддддддддддд
				If !oRestClient:Put(aHeader, cJSON)

					//здддддддддддддддддддддддддддддддддддддддддд
					//ЁObtИm o retorno da API e converte em JSONЁ
					//юдддддддддддддддддддддддддддддддддддддддддд
					cRetJSON := oRestClient:GetLastError() + oRestClient:GetResult()

					//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
					//ЁApresenta mensagem ao usuАrio alertando em tonro da questЦo e nЦo permite Ю inclusЦo do FornecedorЁ
					//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
					Help(NIL, NIL, "AtenГЦo", NIL, "NЦo foi possМvel realizar Ю integraГЦo da coleta do produtor com o MilkUp.", 1, 0, NIL, NIL, NIL, NIL, NIL, {"Informe Ю ocorrЙncia ao departamento de TI."})
					Alert(cRetJSON)

					lRet := .F.
				EndIf

				If alltrim(ZL6->ZL6_FILIAL) = "01LAT01"
					cEmailTo := SuperGetMV("MX_ECOLTB",,.F.)
				ElseIf alltrim(ZL6->ZL6_FILIAL) = "01LAT03"
					cEmailTo := SuperGetMV("MX_ECOLMC",,.F.)
				ENDIF

				cMV_WFDIR		:= AllTrim(GetMV("MV_WFDIR"  ))		// Diretorio de trabalho do Workflow
				cArqHtml		:= cMV_WFDIR +"\WfAPIMkp2.htm"
				oWFProc		:= nil
				cCodProces	:= "SENDWMKP1"
				_cAssunto		:= "[TRELAC] Quantidade Alterada Via Totvs"

				oWFProc := TWFProcess():New(cCodProces, _cAssunto)
				oWFProc:NewTask(_cAssunto, cArqHtml)
				oWFProc:cTo      := cEmailTo
				oWFProc:cSubject := _cAssunto
				oWFProc:oHtml:ValByName("D_DATABASE"       , DDATABASE ) //
				oWFProc:oHtml:ValByName("PRODUTOR"       , ZL6->ZL6_PRODUT + "-" + ZL6->ZL6_LOJPRD )
				oWFProc:oHtml:ValByName("NOME"       , ALLTRIM(ZL6->ZL6_NOMPRD) )
				oWFProc:oHtml:ValByName("VOLUME"       , ALLTRIM(STR(ZL6->ZL6_QTDE)) )
				oWFProc:oHtml:ValByName("VOLORI"       , ZL6->ZL6_QTDORI )
				oWFProc:oHtml:ValByName("LINHA"       , ALLTRIM(SA2->A2_X_LINHA) )
				oWFProc:oHtml:ValByName("DTCOLETA"       , ZL6->ZL6_DTCOL )
				oWFProc:oHtml:ValByName("USER"       , cUserAlt )
				oWFProc:oHtml:ValByName("PROBLEMA"       , "Quantidade Alterada Via TOTVS" )
				oWFProc:Start()

				RECLOCK("ZL6", .F.)
				ZL6->ZL6_IDMOB := 0
				ZL6->(MSUNLOCK())

			Else
				//здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
				//ЁQuando o Mov. Produtor nЦo estА integrado, executa regras visando integraГЦo do mesmoЁ
				//юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
				lRet := U_MLKUPZL6(3)
			EndIf




			//здддддддддддддддддддддддддддддддддддддддд
			//ЁExecuta API REST de EXCLUSцO de coletasЁ
			//юдддддддддддддддддддддддддддддддддддддддд
		Case nOper == 5

			//здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
			//ЁExecuta regras de exclusЦo, caso o Mov. Produtor excluМdo esteja integrado com o MilkUpЁ
			//юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
			If !EMPTY(ZL6->ZL6_MKUID)
				cId := ZL6->ZL6_MKUID

				//здддддддддддддддддддддддддддддддддддддддддд
				//ЁSeta parБmetros de execuГЦo da integraГЦoЁ
				//юдддддддддддддддддддддддддддддддддддддддддд
				oRestClient:SetPath("/coletas/" + cId + "?" + cParam)

				//здддддддддддддддддддддддддддддддддддддддддддддддддд
				//ЁExecutra PUT e avalia retorno (sucesso\insucesso)Ё
				//юдддддддддддддддддддддддддддддддддддддддддддддддддд
				If !oRestClient:Delete(aHeader)

					//здддддддддддддддддддддддддддддддддддддддддд
					//ЁObtИm o retorno da API e converte em JSONЁ
					//юдддддддддддддддддддддддддддддддддддддддддд
					cRetJSON := oRestClient:GetLastError() + oRestClient:GetResult()

					//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
					//ЁApresenta mensagem ao usuАrio alertando em tonro da questЦo e nЦo permite Ю inclusЦo do FornecedorЁ
					//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд
					Help(NIL, NIL, "AtenГЦo", NIL, "NЦo foi possМvel realizar Ю integraГЦo da coleta do produtor com o MilkUp.", 1, 0, NIL, NIL, NIL, NIL, NIL, {"Informe Ю ocorrЙncia ao departamento de TI."})
					Alert(cRetJSON)

					lRet := .F.
				EndIf
			EndIf
		EndCase
	EndIf

Return lRet
